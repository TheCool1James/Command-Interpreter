{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the CbIL Documentation\n\n\n\n\n\n\n\nFor the increadibly confused, curious and bored folks!\n  \n\n\n\n\n\n\nIdiot Warning\n\n\nHello there. The author of this page may be an idiot, so please please \nplease\n if you find any grammatical errors or contexual/factual errors here, \nlet me know\n!\n\n\n\n\nWhat is this?\n\n\nCbIL stands for \nCommand block Intermediate Language\n. This program gives support for 2 languages:  \n\n\n\n\nlwlC:\n Lightweight Object Oriented language based on C#\n\n\nCbIL:\n  Command block Intermediate Language\n\n\n\n\nSupport for both languages exists due to the fact that an intermediate language is easier to parse and turn into a pattern of Minecraft commands.\nThis also provoides ease of access for porting into and out of existing languages such as the Redstone Programming Language (RPL).\nThe key concepts to note here are: Minecraft command blocks, and intermediate languages.\n\n\n\n\nNote\n\n\nAll hyperlinks are going to open in the same tab this page is in. You should probably (manually) open them in a new tab if you want to continue reading this article.\n\n\n\n\nCommand Blocks\n\n\nMinecraft is a childish game. Yes. But, that doesn't mean that it isn't particularly \ninteresting\n in its command features. Within the game, commands can\nbe typed in to induce certain effects on the environment, i.e., placing a block at a fixed location. However, most of these commands must be typed in manually\nas of Minecraft 1.7. In the 1.8 version of the game, \ncommand blocks\n were introduced that allowed the automation of these commands through a \nredstone signal\n.\n\nIf these concepts are not familiar, these articles might be of some help: \n1\n, \n2\n\nHowever, new improvements upon these command blocks have been made in the 1.9 version of the game. \nControl flow\n became an integral part of the command block system:\ncommand blocks can be activated based on the output of previous commands, the direction of the execution can be controlled allowing for more compact designs, and loops\nare now possible with the new additions. Even though these were possible in previous versions of Minecraft, the new improvements allows for control flow without actual\n\nredstone devices\n such as repeaters and comparators, which can often lead to lag and clunky designs.\n\n\nIntermediate Languages (IL)\n\n\n\n\nAsterisks! Exceptions! Over simplifications!\n\n\nOk, this portion of the article calls for lots of asterisk marks. So, please bear with me as I will not be placing any asterisk marks. Just know that they are implied.\n\n\n\n\nLet us suppose that you are a programmer - and you just completed your wonderful Paint program. Being the industrious fellow you are, you decide to port this program and\nmake it cross-platform. Then you realise a problem: you have to rewrite the program in (possibly) different languages using (possibly) different platform-specific libraries.\nHowever, being the good programmer that you are, you decided to stay away from dirty platform-specific hacks (supposed \"native\" calls), and the porting proccess is fairly easy.\n\nNow, imagine that there was this language that allows you to write the program once, and then it magically becomes corss-platform. There is such thing - it's called Java. Java\nis perhaps the most common - and well known - example of a language that gets compiled into an intermediate language: Java bytecode. Then, during runtime, the bytecode is parsed\non the spot and executed (insert asterisk here). This is called JIT compilation. Au contraire, CbIL is AOT, or Ahead-Of-Time where the code is compiled into the native machine\ncode before execution. So, to sum up, the core purpose of an IL is (usually) for optimization and portability. It acts like an in-between language for high-level languages and\nlow-level languages.  \n\n\n\n\nHigh level code \u2192 Compiler \u2192 Bytecode/IL \u2192 Machine Code (runtime or precompiled)  \n\n\n\n\nAlright, how does this all relate to CbIL? Well, as command blocks follow a completly different logic path than traditional programming languages, the IL is there to strip away any\nunnecessary human abstractions and leave behind only the control flow of the program (i.e., \nif\n statements, and \nwhile\n/\nfor\n loops). This makes the coding portion less messy for\nthe creator of the program and the user of the program. Abstraction can be increased, paradigm changed (linear \u2192 object oriented) and overall a cleaner output.  \n\n\nSome articles that may be useful: \n1\n \n2\n \n3\n  \n\n\nWord of Advice from the not-so Wise\n\n\nOk. So, many people would question whether I have gone insane and why I am wasting my time of such a \npointless\n project. Well, this project is not much \npointless\n as it is \npointful. It is my very first attempt at making any sort of parser, let alone a programming language (sort of). Yes, it is heavily based off of the C# syntax, but it does need\nto convert from one \nmindset\n to another. This project may not appeal to a widespread audience, nor do I hope that it will gain widespread popularity, but it is a learning\nexperience in it of itself for me, and for possibly you - the \nuser\n.\n\n\n\n\n\n\nEnd of Introduction",
            "title": "Introduction"
        },
        {
            "location": "/#welcome-to-the-cbil-documentation",
            "text": "For the increadibly confused, curious and bored folks!       Idiot Warning  Hello there. The author of this page may be an idiot, so please please  please  if you find any grammatical errors or contexual/factual errors here,  let me know !",
            "title": "Welcome to the CbIL Documentation"
        },
        {
            "location": "/#what-is-this",
            "text": "CbIL stands for  Command block Intermediate Language . This program gives support for 2 languages:     lwlC:  Lightweight Object Oriented language based on C#  CbIL:   Command block Intermediate Language   Support for both languages exists due to the fact that an intermediate language is easier to parse and turn into a pattern of Minecraft commands.\nThis also provoides ease of access for porting into and out of existing languages such as the Redstone Programming Language (RPL).\nThe key concepts to note here are: Minecraft command blocks, and intermediate languages.   Note  All hyperlinks are going to open in the same tab this page is in. You should probably (manually) open them in a new tab if you want to continue reading this article.",
            "title": "What is this?"
        },
        {
            "location": "/#command-blocks",
            "text": "Minecraft is a childish game. Yes. But, that doesn't mean that it isn't particularly  interesting  in its command features. Within the game, commands can\nbe typed in to induce certain effects on the environment, i.e., placing a block at a fixed location. However, most of these commands must be typed in manually\nas of Minecraft 1.7. In the 1.8 version of the game,  command blocks  were introduced that allowed the automation of these commands through a  redstone signal . \nIf these concepts are not familiar, these articles might be of some help:  1 ,  2 \nHowever, new improvements upon these command blocks have been made in the 1.9 version of the game.  Control flow  became an integral part of the command block system:\ncommand blocks can be activated based on the output of previous commands, the direction of the execution can be controlled allowing for more compact designs, and loops\nare now possible with the new additions. Even though these were possible in previous versions of Minecraft, the new improvements allows for control flow without actual redstone devices  such as repeaters and comparators, which can often lead to lag and clunky designs.",
            "title": "Command Blocks"
        },
        {
            "location": "/#intermediate-languages-il",
            "text": "Asterisks! Exceptions! Over simplifications!  Ok, this portion of the article calls for lots of asterisk marks. So, please bear with me as I will not be placing any asterisk marks. Just know that they are implied.   Let us suppose that you are a programmer - and you just completed your wonderful Paint program. Being the industrious fellow you are, you decide to port this program and\nmake it cross-platform. Then you realise a problem: you have to rewrite the program in (possibly) different languages using (possibly) different platform-specific libraries.\nHowever, being the good programmer that you are, you decided to stay away from dirty platform-specific hacks (supposed \"native\" calls), and the porting proccess is fairly easy. \nNow, imagine that there was this language that allows you to write the program once, and then it magically becomes corss-platform. There is such thing - it's called Java. Java\nis perhaps the most common - and well known - example of a language that gets compiled into an intermediate language: Java bytecode. Then, during runtime, the bytecode is parsed\non the spot and executed (insert asterisk here). This is called JIT compilation. Au contraire, CbIL is AOT, or Ahead-Of-Time where the code is compiled into the native machine\ncode before execution. So, to sum up, the core purpose of an IL is (usually) for optimization and portability. It acts like an in-between language for high-level languages and\nlow-level languages.     High level code \u2192 Compiler \u2192 Bytecode/IL \u2192 Machine Code (runtime or precompiled)     Alright, how does this all relate to CbIL? Well, as command blocks follow a completly different logic path than traditional programming languages, the IL is there to strip away any\nunnecessary human abstractions and leave behind only the control flow of the program (i.e.,  if  statements, and  while / for  loops). This makes the coding portion less messy for\nthe creator of the program and the user of the program. Abstraction can be increased, paradigm changed (linear \u2192 object oriented) and overall a cleaner output.    Some articles that may be useful:  1   2   3",
            "title": "Intermediate Languages (IL)"
        },
        {
            "location": "/#word-of-advice-from-the-not-so-wise",
            "text": "Ok. So, many people would question whether I have gone insane and why I am wasting my time of such a  pointless  project. Well, this project is not much  pointless  as it is \npointful. It is my very first attempt at making any sort of parser, let alone a programming language (sort of). Yes, it is heavily based off of the C# syntax, but it does need\nto convert from one  mindset  to another. This project may not appeal to a widespread audience, nor do I hope that it will gain widespread popularity, but it is a learning\nexperience in it of itself for me, and for possibly you - the  user .",
            "title": "Word of Advice from the not-so Wise"
        },
        {
            "location": "/#end-of-introduction",
            "text": "",
            "title": "End of Introduction"
        },
        {
            "location": "/lang/",
            "text": "Object Orientated Programming\n\n\nPreface\n\n\nProgramming languages can be classified by their \nparadigm\n. A \nprogramming paradigm\n is a way of programming. Some languages may be specialized in one paradigm while others\ncan be programmed in more than one. To learn more about paradigms, this article \nwill\n be helpful: \n1\n\nFor the sake of this article, we will only be focusing soely on one paradigm: object oriented, although the higher-level language (lwlC) can be considered imperataive too.\n\n\n\n\n\n\n\n\n\n\nSome complicated topics are not covered!\n\n\nFor the sake of this very simple \"lwlC\" language, \nsome\n advanced object oriented topics are not covered. If I missed something that you think should be covered, please \nlet me know!\n\n\n\n\nA Brief Definition of OOP\n\n\n\n\nObject-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which may contain data, in the form of fields, often known as attributes;\nand code, in the form of procedures, often known as methods. A feature of objects is that an object's procedures can access and often modify the data fields of the object\nwith which they are associated (objects have a notion of \"this\" or \"self\").  \n\n\n\n\n\nObject-oriented programming. (2017, March 14). Retrieved March 15, 2017, from\n\n Wikipedia \n\n\n\n\nA Brief Overview of OOP Concepts\n\n\nObject\n\n\nThe basic (and most important) component in object oriented programming. It is both data and methods that modify the data in one entity. Objects are created by calling a\n\nconstructor\n. The constructor is defined in the class of the object. The creation of an object is called \ninstantiation\n and it creates an \ninstance\n of the object.\n\n\nClass\n\n\nClasses define what an object is going to be. It defines the fields and functions an object can have and perform. However, static classes\nare classes that can not be instantiated. As a result, a static class can not have a constructor method. They are a container for a set of method(s) that operate via\na set of input parameters. A static class \ncan only contain static members\n, which means all fields must be static. They cannot be inherited; so they are \nsealed\n.\n\n\nAbstraction\n\n\nI'm going to insert a quote here because it is going to explain it better than what I was about to say:\n\n\n\n\nAbstraction is \"the process of identifying common patterns that have systematic variations; an abstraction represents the common pattern and provides a means\nfor specifying which variation to use\" (Richard Gabriel).  \n\n\n\n\nLet's take some C# code from the Microsoft website:\n``` C# linenums=\"1\"\npublic abstract class Shape\n{\n    private string name;\n\n\npublic\n \nShape\n(\nstring\n \naName\n)\n \n//\nConstructor\n\n\n{\n\n    \nID\n \n=\n \naName\n;\n\n\n}\n\n\n\n//\n \nThis\n \ncan\n \nbe\n \nmodified\n.\n \nNote\n \nthe\n \nset\n \nkeyword\n.\n\n\npublic\n \nstring\n \nID\n \n{\n \nget\n \n{\n \nreturn\n \nname\n;\n \n}\n \nset\n \n{\n \nname\n \n=\n \nvalue\n \n}\n \n}\n\n\n\n//\n \nArea\n \nis\n \nread-only\n.\n \nNote\n \nthe\n \nabsense\n \nof\n \nthe\n \nset\n \nkeyword\n.\n\n\npublic\n \nabstract\n \ndouble\n \nArea\n \n{\n \nget\n;\n \n}\n\n\n\n//\n \nOverride\n \nthe\n \nobject\n.\nToString\n()\n \nthat\n \ncomes\n \nwith\n \nC\n#\n\n\npublic\n \noverride\n \nstring\n \nToString\n()\n\n\n{\n\n    \nreturn\n \nID\n \n+\n \n\"\n \nArea\n \nis\n \n\"\n \n+\n \nstring.Format(\"{0:F2\n}\n\"\n,\n \nArea\n);\n\n\n}\n\n\n\n\n\n\n}\n\n\nThe above code identified the *common attributes of shapes* - the area and name. Now, we can create a variation of this shape by inheriting it:\n\n```C# linenums=\"1\"\npublic class Square : Shape // A square is a shape\n{\n    // The side attribute is unique to squares only. Since it was not needed,\n    // we did not put it in our abstract class. Instead, we put it in our\n    // (variation) child class. Ba-bam! Abstraction!\n    private int side;\n\n    // Let us override the default constructor to add a side parameter\n    public Square(int aSide, string aID)\n        : base (aID)\n    {\n        this.side = aSide;\n    }\n\n    // Here, we return the area as side squared\n    public override double Area { get { return side * side; } }\n}\n\n\n\n\n\nSo, we can see that a square has a new property: side (length). As that property was unique to only the square (insert asterisk here), we did not add the property\nto our abstract class, because \nit was not needed\n. Instead, we added it to our child \nSquare\n class. To see more in depth into the example used: \n2\n\n\nEncapsulation\n\n\nOk, do not confuse this with \nabstraction\n. They are different concepts. Encapsulation is the means of hiding information that is not needed to the client of the object.\nWe encapsulate to reduce the complexity of the code. In some way, you can take an object someone has already made, use it in your code, and it should \njust work\n (insert asterisk).\nEncapsulation is achieved by using the accesor keywords: \npublic\n and \nprivate\n. The client of the object does not, and should not need to know \nhow\n and object is doing its work,\nand see the inner \"guts\" of the object. So, it is like a black box of some ways, where it \"just works\". Recommended article: \n3\n\nAlright. Some definitions \n \n4\n \n:\n\n\nMutater\n: This is a method that modifies the properties/state of an object. It can be a method, or through the \nset\n keyword.\n\n\nAccessor\n: This is something that gets the state of an object, usually through the \nget\n keyword.  \n\n\nInheritance\n\n\nInheritance is where you want the properties and methods of one object to be present in another. You may recall our abstract class \nShape\n example. In that example, the \nSquare\n\nclass inherits the \nShape\n class. Due to the \nShape\n class being abstract, the \nSquare\n class \nmust override\n all the methods and properties outlined in the \nShape\n class. With\nnormal class \u2192 class inheritance, overriding is not mandated. Let's say you have a class:\n```C# linenums=\"1\"\npublic class Foo\n{\n    public void Bar()\n    {\n        Console.WriteLine(\"Hello from Foo!\");\n    }\n\n\npublic void Bar1()\n{\n    Console.WriteLine(\"Hello from Foo!\");\n}\n\n\n\n\n\n}\n\n\npublic class FooBar : Foo\n{\n    // We are going to override the Bar1() method defined in Foo\n    public override void Bar1()\n    {\n        Console.WriteLine(\"BWAHAHAHA. I have overriden!\");\n    }\n\n\npublic void DoStuff()\n{\n    Console.WriteLine(\"Hello from FooBar!\");\n}\n\n\n\n\n\n}\n\n\nWe can see that `FooBar` inherits `Foo`. This means that you can call `Bar()` from `FooBar`, but the output of `Bar1()` from `FooBar` will be changed as it was overriden:\n\n```C# linenums=\"1\"\n// Create an instance of our two objects\nFoo obj = new Foo();\nFooBar obj2 = new FooBar();\n\nobj.Bar();\nobj.Bar1();\n\nobj2.Bar(); //Inherited\nobj2.Bar1(); //Overriden\nobj2.DoStuff(); //Added\n\n\n\n\n\nThis will output:\n\n\nlinenums=\"1\"Hello from Foo!Hello from Foo!Hello from Foo!BWAHAHAHA. I have overriden!Hello from FooBar!\n\n\nHere is a nice article with a nice diagram to help you through: \n5\n\n\nPolymorphism\n\n\nIn the word polymorphism, poly is the Greek word for \"many\" or \"much,\" and \"morph\" means \"forms.\" Polymorphism is the ability for a method to proccess objects differently\nbased on their type or class. In other words, it is the ability to \noverride\n or \nredefine\n methods from parent classes.",
            "title": "The OOP Paradigm"
        },
        {
            "location": "/lang/#object-orientated-programming",
            "text": "",
            "title": "Object Orientated Programming"
        },
        {
            "location": "/lang/#preface",
            "text": "Programming languages can be classified by their  paradigm . A  programming paradigm  is a way of programming. Some languages may be specialized in one paradigm while others\ncan be programmed in more than one. To learn more about paradigms, this article  will  be helpful:  1 \nFor the sake of this article, we will only be focusing soely on one paradigm: object oriented, although the higher-level language (lwlC) can be considered imperataive too.      Some complicated topics are not covered!  For the sake of this very simple \"lwlC\" language,  some  advanced object oriented topics are not covered. If I missed something that you think should be covered, please  let me know!",
            "title": "Preface"
        },
        {
            "location": "/lang/#a-brief-definition-of-oop",
            "text": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which may contain data, in the form of fields, often known as attributes;\nand code, in the form of procedures, often known as methods. A feature of objects is that an object's procedures can access and often modify the data fields of the object\nwith which they are associated (objects have a notion of \"this\" or \"self\").     \nObject-oriented programming. (2017, March 14). Retrieved March 15, 2017, from  Wikipedia",
            "title": "A Brief Definition of OOP"
        },
        {
            "location": "/lang/#a-brief-overview-of-oop-concepts",
            "text": "",
            "title": "A Brief Overview of OOP Concepts"
        },
        {
            "location": "/lang/#object",
            "text": "The basic (and most important) component in object oriented programming. It is both data and methods that modify the data in one entity. Objects are created by calling a constructor . The constructor is defined in the class of the object. The creation of an object is called  instantiation  and it creates an  instance  of the object.",
            "title": "Object"
        },
        {
            "location": "/lang/#class",
            "text": "Classes define what an object is going to be. It defines the fields and functions an object can have and perform. However, static classes\nare classes that can not be instantiated. As a result, a static class can not have a constructor method. They are a container for a set of method(s) that operate via\na set of input parameters. A static class  can only contain static members , which means all fields must be static. They cannot be inherited; so they are  sealed .",
            "title": "Class"
        },
        {
            "location": "/lang/#abstraction",
            "text": "I'm going to insert a quote here because it is going to explain it better than what I was about to say:   Abstraction is \"the process of identifying common patterns that have systematic variations; an abstraction represents the common pattern and provides a means\nfor specifying which variation to use\" (Richard Gabriel).     Let's take some C# code from the Microsoft website:\n``` C# linenums=\"1\"\npublic abstract class Shape\n{\n    private string name;  public   Shape ( string   aName )   // Constructor  { \n     ID   =   aName ;  }  //   This   can   be   modified .   Note   the   set   keyword .  public   string   ID   {   get   {   return   name ;   }   set   {   name   =   value   }   }  //   Area   is   read-only .   Note   the   absense   of   the   set   keyword .  public   abstract   double   Area   {   get ;   }  //   Override   the   object . ToString ()   that   comes   with   C #  public   override   string   ToString ()  { \n     return   ID   +   \"   Area   is   \"   +   string.Format(\"{0:F2 } \" ,   Area );  }   }  The above code identified the *common attributes of shapes* - the area and name. Now, we can create a variation of this shape by inheriting it:\n\n```C# linenums=\"1\"\npublic class Square : Shape // A square is a shape\n{\n    // The side attribute is unique to squares only. Since it was not needed,\n    // we did not put it in our abstract class. Instead, we put it in our\n    // (variation) child class. Ba-bam! Abstraction!\n    private int side;\n\n    // Let us override the default constructor to add a side parameter\n    public Square(int aSide, string aID)\n        : base (aID)\n    {\n        this.side = aSide;\n    }\n\n    // Here, we return the area as side squared\n    public override double Area { get { return side * side; } }\n}  So, we can see that a square has a new property: side (length). As that property was unique to only the square (insert asterisk here), we did not add the property\nto our abstract class, because  it was not needed . Instead, we added it to our child  Square  class. To see more in depth into the example used:  2",
            "title": "Abstraction"
        },
        {
            "location": "/lang/#encapsulation",
            "text": "Ok, do not confuse this with  abstraction . They are different concepts. Encapsulation is the means of hiding information that is not needed to the client of the object.\nWe encapsulate to reduce the complexity of the code. In some way, you can take an object someone has already made, use it in your code, and it should  just work  (insert asterisk).\nEncapsulation is achieved by using the accesor keywords:  public  and  private . The client of the object does not, and should not need to know  how  and object is doing its work,\nand see the inner \"guts\" of the object. So, it is like a black box of some ways, where it \"just works\". Recommended article:  3 \nAlright. Some definitions    4   :  Mutater : This is a method that modifies the properties/state of an object. It can be a method, or through the  set  keyword.  Accessor : This is something that gets the state of an object, usually through the  get  keyword.",
            "title": "Encapsulation"
        },
        {
            "location": "/lang/#inheritance",
            "text": "Inheritance is where you want the properties and methods of one object to be present in another. You may recall our abstract class  Shape  example. In that example, the  Square \nclass inherits the  Shape  class. Due to the  Shape  class being abstract, the  Square  class  must override  all the methods and properties outlined in the  Shape  class. With\nnormal class \u2192 class inheritance, overriding is not mandated. Let's say you have a class:\n```C# linenums=\"1\"\npublic class Foo\n{\n    public void Bar()\n    {\n        Console.WriteLine(\"Hello from Foo!\");\n    }  public void Bar1()\n{\n    Console.WriteLine(\"Hello from Foo!\");\n}  }  public class FooBar : Foo\n{\n    // We are going to override the Bar1() method defined in Foo\n    public override void Bar1()\n    {\n        Console.WriteLine(\"BWAHAHAHA. I have overriden!\");\n    }  public void DoStuff()\n{\n    Console.WriteLine(\"Hello from FooBar!\");\n}  }  We can see that `FooBar` inherits `Foo`. This means that you can call `Bar()` from `FooBar`, but the output of `Bar1()` from `FooBar` will be changed as it was overriden:\n\n```C# linenums=\"1\"\n// Create an instance of our two objects\nFoo obj = new Foo();\nFooBar obj2 = new FooBar();\n\nobj.Bar();\nobj.Bar1();\n\nobj2.Bar(); //Inherited\nobj2.Bar1(); //Overriden\nobj2.DoStuff(); //Added  This will output:  linenums=\"1\"Hello from Foo!Hello from Foo!Hello from Foo!BWAHAHAHA. I have overriden!Hello from FooBar!  Here is a nice article with a nice diagram to help you through:  5",
            "title": "Inheritance"
        },
        {
            "location": "/lang/#polymorphism",
            "text": "In the word polymorphism, poly is the Greek word for \"many\" or \"much,\" and \"morph\" means \"forms.\" Polymorphism is the ability for a method to proccess objects differently\nbased on their type or class. In other words, it is the ability to  override  or  redefine  methods from parent classes.",
            "title": "Polymorphism"
        },
        {
            "location": "/lwlC/",
            "text": "Lightwieght C# (lwlC)\n\n\n\n\n\nPreface\n\n\nThis is the human-readable component of the entire language framework. This language is what the user types in to get parsed. This article aims to give an overview as to how\neverything works.",
            "title": "Introduction to lwlC"
        },
        {
            "location": "/lwlC/#lightwieght-c-lwlc",
            "text": "",
            "title": "Lightwieght C# (lwlC)"
        },
        {
            "location": "/lwlC/#preface",
            "text": "This is the human-readable component of the entire language framework. This language is what the user types in to get parsed. This article aims to give an overview as to how\neverything works.",
            "title": "Preface"
        },
        {
            "location": "/CbIL/",
            "text": "Command Block Intermediate Language (CbIL)\n\n\n\n\n\nPreface\n\n\nUUuuughhhh more typing.\n\n\nst=>start\ne=>end\n\nop1=>operation: Register\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(function (document) {\n    var convertUML = function(className, converter, settings) {\n        var charts = document.querySelectorAll(\"pre.\" + className),\n            arr = [],\n            i, j, maxItem, diagaram, text, curNode;\n\n        // Is there a settings object?\n        if (settings === void 0) {\n            settings = {};\n        }\n\n        // Make sure we are dealing with an array\n        for(i = 0, maxItem = charts.length; i < maxItem; i++) arr.push(charts[i]);\n\n        // Find the UML source element and get the text\n        for (i = 0, maxItem = arr.length; i < maxItem; i++) {\n            childEl = arr[i].firstChild;\n            parentEl = childEl.parentNode;\n            text = \"\";\n            for (j = 0; j < childEl.childNodes.length; j++) {\n                curNode = childEl.childNodes[j];\n                whitespace = /^\\s*$/;\n                if (curNode.nodeName === \"#text\" && !(whitespace.test(curNode.nodeValue))) {\n                    text = curNode.nodeValue;\n                    break;\n                }\n            }\n\n            // Do UML conversion and replace source\n            el = document.createElement('div');\n            el.className = className;\n            parentEl.parentNode.insertBefore(el, parentEl);\n            parentEl.parentNode.removeChild(parentEl);\n            diagram = converter.parse(text);\n            diagram.drawSVG(el, settings);\n        }\n    };\n\n    function onReady(fn) {\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', fn);\n        } else {\n            document.attachEvent('onreadystatechange', function() {\n                if (document.readyState === 'interactive')\n                    fn();\n            });\n        }\n    }\n\n    onReady(function(){\n        convertUML('uml-flowchart', flowchart);\n        convertUML('uml-sequence-diagram', Diagram, {theme: 'simple'});\n    });\n})(document);",
            "title": "Introduction to CbIL"
        },
        {
            "location": "/CbIL/#command-block-intermediate-language-cbil",
            "text": "",
            "title": "Command Block Intermediate Language (CbIL)"
        },
        {
            "location": "/CbIL/#preface",
            "text": "UUuuughhhh more typing.  st=>start\ne=>end\n\nop1=>operation: Register\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op1      \n\n(function (document) {\n    var convertUML = function(className, converter, settings) {\n        var charts = document.querySelectorAll(\"pre.\" + className),\n            arr = [],\n            i, j, maxItem, diagaram, text, curNode;\n\n        // Is there a settings object?\n        if (settings === void 0) {\n            settings = {};\n        }\n\n        // Make sure we are dealing with an array\n        for(i = 0, maxItem = charts.length; i < maxItem; i++) arr.push(charts[i]);\n\n        // Find the UML source element and get the text\n        for (i = 0, maxItem = arr.length; i < maxItem; i++) {\n            childEl = arr[i].firstChild;\n            parentEl = childEl.parentNode;\n            text = \"\";\n            for (j = 0; j < childEl.childNodes.length; j++) {\n                curNode = childEl.childNodes[j];\n                whitespace = /^\\s*$/;\n                if (curNode.nodeName === \"#text\" && !(whitespace.test(curNode.nodeValue))) {\n                    text = curNode.nodeValue;\n                    break;\n                }\n            }\n\n            // Do UML conversion and replace source\n            el = document.createElement('div');\n            el.className = className;\n            parentEl.parentNode.insertBefore(el, parentEl);\n            parentEl.parentNode.removeChild(parentEl);\n            diagram = converter.parse(text);\n            diagram.drawSVG(el, settings);\n        }\n    };\n\n    function onReady(fn) {\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', fn);\n        } else {\n            document.attachEvent('onreadystatechange', function() {\n                if (document.readyState === 'interactive')\n                    fn();\n            });\n        }\n    }\n\n    onReady(function(){\n        convertUML('uml-flowchart', flowchart);\n        convertUML('uml-sequence-diagram', Diagram, {theme: 'simple'});\n    });\n})(document);",
            "title": "Preface"
        },
        {
            "location": "/issue/",
            "text": "Issues, Bugs and the Likes\n\n\nIssues with Documentation\n\n\nDocumentation issues/inaccuracies can be reported through the comments or directly to me via email, however, the \nformer is recommended\n. \nYou may also suggest fixes throug the \ngh-pages\n branch of the GitHub issue tracker.\nThe comment section can be used to suggest fixes or additions. If comments are down, you may contact me at:\n\n\nkevindai02@gmail.com\n  \n\n\n\n\nWarning\n\n\nSpam of any kind is \nnot welcome\n, and will be reported and deleted.\n\n\n\n\nIssues/Bugs with Code\n\n\nAll issues are to be reported to the GitHub issue tracker. Please \ndo not\n report in the comments. Emailing me about it is \nnot recommended\n as I will \nnot\n be happy about it.\nIf you would like to contribute to the repository, create a pull request to merge your contribution to mine. Contributions are greatly \nwelcomed\n.",
            "title": "Issue Tracking"
        },
        {
            "location": "/issue/#issues-bugs-and-the-likes",
            "text": "",
            "title": "Issues, Bugs and the Likes"
        },
        {
            "location": "/issue/#issues-with-documentation",
            "text": "Documentation issues/inaccuracies can be reported through the comments or directly to me via email, however, the  former is recommended . \nYou may also suggest fixes throug the  gh-pages  branch of the GitHub issue tracker.\nThe comment section can be used to suggest fixes or additions. If comments are down, you may contact me at:  kevindai02@gmail.com      Warning  Spam of any kind is  not welcome , and will be reported and deleted.",
            "title": "Issues with Documentation"
        },
        {
            "location": "/issue/#issuesbugs-with-code",
            "text": "All issues are to be reported to the GitHub issue tracker. Please  do not  report in the comments. Emailing me about it is  not recommended  as I will  not  be happy about it.\nIf you would like to contribute to the repository, create a pull request to merge your contribution to mine. Contributions are greatly  welcomed .",
            "title": "Issues/Bugs with Code"
        }
    ]
}